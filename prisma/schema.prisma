datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CustomerStatus {
  banned
  on
}

enum StaffStatus {
  banned
  on
}

model Customer {
  id           String            @id @default(cuid())
  phoneNumbers String            @unique @db.VarChar(10) // 
  fullname     String            @db.VarChar(255) // New field for full name
  status       CustomerStatus    @default(on)
  avatarId     String?
  avatarUrl    String?
  Password     CustomerPassword?
  Orders       Order[]

  createdAt DateTime @default(now()) // New field for created_at
  updatedAt DateTime @updatedAt // New field for updated_at
}

model Staff {
  id            String      @id @default(uuid())
  username      String      @unique
  phoneNumbers  String      @unique
  fullname      String
  image         String?
  address       String?
  salary        Int?
  status        StaffStatus @default(on)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Roles         StaffRole[]
  OrdersChef    Order[]     @relation("ChefOrders")
  OrdersShipper Order[]     @relation("ShipperOrders")
  Coupons       Coupon[]    @relation("CouponsCreatedBy")

  Deliveries        Delivery[]
  Password          StaffPassword?
  ImportCreatedBy   Import[]       @relation("ImportCreatedBy")
  ImportReceivedBy  Import[]       @relation("ImportReceivedBy")
  ExportCreatedBy   Export[]       @relation("ExportCreatedBy")
  ExportDeliveredBy Export[]       @relation("ExportDeliveredBy")
}

model CustomerPassword {
  hash       String
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([customerId]) // Added index for foreign key
}

model StaffPassword {
  hash    String
  staffId String @unique
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([staffId]) // Added index for foreign key
}

enum ResourceType {
  video
  image
  raw
}

model Media {
  id           String       @id @default(cuid())
  publicId     String
  displayName  String
  resourceType ResourceType
  type         String
  width        Int?
  height       Int?
  bytes        Int
  url          String
  format       String?
  caption      String? // New field for caption
  altText      String? // New field for alt text
  description  String? // New field for description
  createdAt    DateTime     @default(now())
}

// New model for Role
model Role {
  id          String           @id @default(cuid())
  name        String           @unique @db.VarChar(100) // New field for role name
  description String?          @db.Text // New field for role description
  createdAt   DateTime         @default(now()) // New field for created_at
  updatedAt   DateTime         @updatedAt // New field for updated_at
  permissions RolePermission[] // New relation to RolePermission
  staffRoles  StaffRole[]
}

// New model for Permission
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100) // New field for permission name
  group       String   @db.VarChar(100)
  displayName String   @unique @db.VarChar(100)
  description String?  @db.Text // New field for permission description
  createdAt   DateTime @default(now()) // New field for created_at
  updatedAt   DateTime @updatedAt // New field for updated_at

  roles RolePermission[] // New relation to RolePermission
}

// New model for Role_Permissions
model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to Role
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to Permission

  @@id([roleId, permissionId]) // Composite primary key
  @@index([roleId]) //
  @@index([permissionId])
}

model Provider {
  id        String   @id @default(uuid())
  name      String
  address   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Imports   Import[]
  Exports   Export[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String
  slug      String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Products  Product[]
}

model Border {
  id             String          @id @default(uuid())
  name           String          @unique
  price          Int
  image          String? // New field
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ProductBorders ProductBorder[]
  OrderDetail    OrderDetail[]
}

model Topping {
  id              String           @id @default(uuid())
  name            String           @unique
  price           Int?
  materialId      String?
  image           String? // New field
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ProductToppings ProductTopping[]
  Material        Material?        @relation(fields: [materialId], references: [id])
  OrderDetail     OrderDetail[]
}

model Size {
  id           String        @id @default(uuid())
  name         String        @unique
  image        String? // New field
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ProductSizes ProductSize[]
  OrderDetail  OrderDetail[]
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String?
  description String?
  discount    Decimal
  quantity    Int
  startDate   DateTime
  endDate     DateTime
  image       String? // New field
  bannerImage String?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Orders      Order[]
  createdBy   Staff?   @relation("CouponsCreatedBy", fields: [createdById], references: [id])

  @@index([createdById])
}

model Material {
  id              String           @id @default(uuid())
  name            String           @unique
  unit            String
  warningLimits   Decimal
  image           String? // New field
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ImportMaterials ImportMaterial[]
  ExportMaterials ExportMaterial[]
  Recipes         Recipe[]
  Topping         Topping[]
  Inventory       Inventory[]
}

model Import {
  id                   String           @id @default(uuid())
  totalAmount          Decimal
  status               Status
  providerId           String
  createdById          String? // New field for the ID of the staff who created the import
  receivedById         String? // New field for the ID of the staff who received the import
  createdBy            Staff?           @relation("ImportCreatedBy", fields: [createdById], references: [id]) // Relation for createdById
  receivedBy           Staff?           @relation("ImportReceivedBy", fields: [receivedById], references: [id]) // Relation for receivedById
  expectedDeliveryDate DateTime? // New field for expected delivery date
  provider             Provider         @relation(fields: [providerId], references: [id])
  ImportMaterials      ImportMaterial[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([providerId]) // Added index for foreign key
  @@index([createdById]) // Added index for the new field
  @@index([receivedById]) // Added index for the new field
}

model Export {
  id          String  @id @default(uuid())
  totalAmount Decimal
  status      Status
  providerId  String

  createdById   String? // New field for the ID of the staff who created the export
  deliveredById String? // New field for the ID of the staff who delivered the export
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  provider      Provider @relation(fields: [providerId], references: [id])

  createdBy            Staff?           @relation("ExportCreatedBy", fields: [createdById], references: [id]) // Relation for createdById
  deliveredBy          Staff?           @relation("ExportDeliveredBy", fields: [deliveredById], references: [id]) // Relation for deliveredById
  ExportMaterials      ExportMaterial[]
  expectedDeliveryDate DateTime? // New field for expected delivery date

  @@index([providerId]) // Added index for foreign key
  @@index([createdById]) // Added index for the new field
  @@index([deliveredById]) // Added index for the new field
}

model ImportMaterial {
  id               String    @id @default(uuid())
  importId         String
  materialId       String
  expectedQuantity Decimal // Total expected quantity to be delivered
  qualityStandard  String? // Expected quality description or standard
  actualGood       Decimal // Actual quantity that meets the quality standard
  actualDefective  Decimal // Actual quantity that does not meet the quality standard and is to be returned
  expiredDate      DateTime? // Expiration date of the material
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Import           Import    @relation(fields: [importId], references: [id])
  Material         Material  @relation(fields: [materialId], references: [id])

  @@index([importId])
  @@index([materialId])
}

model Inventory {
  id          String    @id @default(uuid())
  materialId  String
  quantity    Decimal
  expiredDate DateTime?
  Material    Material  @relation(fields: [materialId], references: [id])

  @@unique([materialId, expiredDate])
  @@index([materialId])
}

model ExportMaterial {
  exportId   String
  materialId String
  quantity   Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  export     Export   @relation(fields: [exportId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])

  @@id([exportId, materialId])
}

model Order {
  id              String        @id @default(uuid())
  address         String
  shipNote        String?
  totalAmount     Decimal
  status          Status
  paymentStatus   String? // Thêm trạng thái thanh toán, nullable
  paymentUrl      String? // Thêm đường dẫn thanh toán, nullable
  cancelledReason String?
  couponId        String?
  chefId          String?
  shipperId       String?
  customerId      String
  ratingId        String?       @unique
  deliveryId      String?
  deliveryStep    Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  coupon          Coupon?       @relation(fields: [couponId], references: [id])
  chef            Staff?        @relation("ChefOrders", fields: [chefId], references: [id])
  shipper         Staff?        @relation("ShipperOrders", fields: [shipperId], references: [id])
  customer        Customer      @relation(fields: [customerId], references: [id])
  rating          Rating?
  delivery        Delivery?     @relation(fields: [deliveryId], references: [id])
  OrderDetail     OrderDetail[]

  @@index([customerId]) // Added index for foreign key
  @@index([chefId]) // Added index for foreign key
  @@index([shipperId]) // Added index for foreign key
  @@index([couponId]) // Added index for foreign key
  @@index([deliveryId]) // Added index for foreign key
}

model OrderDetail {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  borderId  String?
  sizeId    String
  toppingId String? // Nullable if topping is optional
  price     Decimal
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  border    Border?  @relation(fields: [borderId], references: [id])
  size      Size     @relation(fields: [sizeId], references: [id])
  topping   Topping? @relation(fields: [toppingId], references: [id]) // Optional relation for a single topping

  @@index([orderId])
  @@index([productId, borderId, sizeId, toppingId]) // Unique constraint removed
}

model Delivery {
  id        String   @id @default(uuid())
  status    Status
  staffId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staff     Staff    @relation(fields: [staffId], references: [id])
  Orders    Order[]

  @@index([staffId]) // Added index for foreign key
}

model Rating {
  id          String   @id @default(uuid())
  stars       Int
  description String?
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
  createdAt   DateTime @default(now())
}

model StaffRole {
  staffId   String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staff     Staff    @relation(fields: [staffId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])

  @@id([staffId, roleId])
  @@index([staffId]) // Added index for foreign key
  @@index([roleId]) // Added index for foreign key
}

model Product {
  id                String           @id @default(uuid())
  name              String
  image             String?
  image_mobile      String?
  shortDescription  String
  detailDescription String?
  slug              String           @unique
  categoryId        String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  category          Category         @relation(fields: [categoryId], references: [id])
  Borders           ProductBorder[]
  Toppings          ProductTopping[]
  Sizes             ProductSize[]
  Recipes           Recipe[]
  OrderDetail       OrderDetail[]
}

model ProductBorder {
  productId String
  borderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  border    Border   @relation(fields: [borderId], references: [id])

  @@id([productId, borderId])
  @@index([productId]) // Added index for foreign key
}

model ProductTopping {
  productId String
  toppingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  topping   Topping  @relation(fields: [toppingId], references: [id])

  @@id([productId, toppingId])
}

model ProductSize {
  productId String
  sizeId    String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  size      Size     @relation(fields: [sizeId], references: [id])

  @@id([productId, sizeId])
}

model Recipe {
  productId  String
  materialId String
  quantity   Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])

  @@id([productId, materialId])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}
